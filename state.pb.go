// Code generated by protoc-gen-go. DO NOT EDIT.
// source: state.proto

package main

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DiscordBotState struct {
	HouseCupScore        []*UserScore `protobuf:"bytes,1,rep,name=house_cup_score,json=houseCupScore,proto3" json:"house_cup_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DiscordBotState) Reset()         { *m = DiscordBotState{} }
func (m *DiscordBotState) String() string { return proto.CompactTextString(m) }
func (*DiscordBotState) ProtoMessage()    {}
func (*DiscordBotState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a888679467bb7853, []int{0}
}

func (m *DiscordBotState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscordBotState.Unmarshal(m, b)
}
func (m *DiscordBotState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscordBotState.Marshal(b, m, deterministic)
}
func (m *DiscordBotState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscordBotState.Merge(m, src)
}
func (m *DiscordBotState) XXX_Size() int {
	return xxx_messageInfo_DiscordBotState.Size(m)
}
func (m *DiscordBotState) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscordBotState.DiscardUnknown(m)
}

var xxx_messageInfo_DiscordBotState proto.InternalMessageInfo

func (m *DiscordBotState) GetHouseCupScore() []*UserScore {
	if m != nil {
		return m.HouseCupScore
	}
	return nil
}

type UserScore struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score                int64    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserScore) Reset()         { *m = UserScore{} }
func (m *UserScore) String() string { return proto.CompactTextString(m) }
func (*UserScore) ProtoMessage()    {}
func (*UserScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_a888679467bb7853, []int{1}
}

func (m *UserScore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserScore.Unmarshal(m, b)
}
func (m *UserScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserScore.Marshal(b, m, deterministic)
}
func (m *UserScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserScore.Merge(m, src)
}
func (m *UserScore) XXX_Size() int {
	return xxx_messageInfo_UserScore.Size(m)
}
func (m *UserScore) XXX_DiscardUnknown() {
	xxx_messageInfo_UserScore.DiscardUnknown(m)
}

var xxx_messageInfo_UserScore proto.InternalMessageInfo

func (m *UserScore) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserScore) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*DiscordBotState)(nil), "main.DiscordBotState")
	proto.RegisterType((*UserScore)(nil), "main.UserScore")
}

func init() { proto.RegisterFile("state.proto", fileDescriptor_a888679467bb7853) }

var fileDescriptor_a888679467bb7853 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2e, 0x49, 0x2c,
	0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0xf2, 0xe2,
	0xe2, 0x77, 0xc9, 0x2c, 0x4e, 0xce, 0x2f, 0x4a, 0x71, 0xca, 0x2f, 0x09, 0x06, 0x49, 0x0b, 0x99,
	0x73, 0xf1, 0x67, 0xe4, 0x97, 0x16, 0xa7, 0xc6, 0x27, 0x97, 0x16, 0xc4, 0x83, 0xa4, 0x52, 0x25,
	0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0xf8, 0xf5, 0x40, 0x5a, 0xf4, 0x42, 0x8b, 0x53, 0x8b, 0x82,
	0x41, 0xc2, 0x41, 0xbc, 0x60, 0x75, 0xce, 0xa5, 0x05, 0x60, 0xae, 0x92, 0x15, 0x17, 0x27, 0x5c,
	0x4e, 0x48, 0x9c, 0x8b, 0xbd, 0xb4, 0x38, 0xb5, 0x28, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51,
	0x83, 0x33, 0x88, 0x0d, 0xc4, 0xf5, 0x4c, 0x11, 0x12, 0xe1, 0x62, 0x85, 0x18, 0xca, 0xa4, 0xc0,
	0xa8, 0xc1, 0x1c, 0x04, 0xe1, 0x24, 0xb1, 0x81, 0x1d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xbf, 0x9c, 0xfd, 0xea, 0xa3, 0x00, 0x00, 0x00,
}
